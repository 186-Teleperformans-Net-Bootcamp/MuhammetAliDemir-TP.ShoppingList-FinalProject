@page "/signup"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager _uriHelper

<section class="vh-90">
    <div class="container py-5 h-100">
        <div class="row d-flex align-items-center justify-content-center h-100">
            <div class="col-md-7 col-lg-5 col-xxl-5">

                <EditForm Model="@User" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                        
                    <!-- Firstname input -->
                    <div class="form-outline mb-4">
                        <label class="form-label" for="FirstName">FirstName</label>
                            <InputText type="text" @bind-Value="User.FirstName" id="FirstName" class="form-control form-control-lg" />
                        <ValidationMessage For="() => User.FirstName" />
                    </div>      

                    <!-- Lastname input -->
                        <div class="form-outline mb-4">
                            <label class="form-label" for="Lastname">Lastname</label>
                            <InputText type="text" @bind-Value="User.LastName" id="Lastname" class="form-control form-control-lg" />
                        <ValidationMessage For="() => User.LastName" />
                    </div>      


                    <!-- Username input -->
                        <div class="form-outline mb-4">
                        <label class="form-label" for="Username">Username</label>
                            <InputText type="text" @bind-Value="User.Username" id="Username" class="form-control form-control-lg" />
                        <ValidationMessage For="() => User.Username" />
                    </div>

                    <!-- Email input -->
                    <div class="form-outline mb-4">
                        <label class="form-label" for="Email">Email address</label>
                            <InputText type="email" @bind-Value="User.Email" id="Email" class="form-control form-control-lg" />
                        <ValidationMessage For="() => User.Email" />
                    </div>

                    <!-- Password input -->
                    <div class="form-outline mb-4">
                        <label class="form-label" for="Password">Password</label>
                            <InputText type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,20}"
                            title="Password must include; numbers, capital, lower case and at least 8 characters."
                            id="Password" @bind-Value="User.Password" class="form-control form-control-lg" />
                        <ValidationMessage For="() => User.Password" />
                    </div>

                    <!-- Submit button -->
                    <button type="submit" class="btn btn-primary btn-light btn-block">Sign up</button>

                <ValidationSummary />
                </EditForm>
                        @if (_errors != "" && _errors is not null)
                        {
                            <br/>
                            <br/>
                            <h3 style="color:red;">@_errors</h3>
                        }
            </div>
        </div>
    </div>
</section>


@code {
    private readonly UserSignup User = new();
    private string _errors;
    
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => _errors = "");
    }

	private async Task Submit()
    {
        _errors = "";
        var client = _clientFactory.CreateClient();

        var response = await client.PostAsJsonAsync("https://localhost:5070/users/signup", User);

        if (response.IsSuccessStatusCode)
        {
            string result = await response.Content.ReadAsStringAsync();
            JObject resultObject = JObject.Parse(result);
          
            _uriHelper.NavigateTo("login");
        }
        else
        {
            string result = await response.Content.ReadAsStringAsync();
            JObject resultObject = JObject.Parse(result);
            _errors = resultObject.SelectToken("errors").Value<string>();
        }
    }
}